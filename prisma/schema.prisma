generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String      @unique
  accountId       String      @db.ObjectId
  account         Account     @relation(fields: [accountId], references: [id])
  items           OrderItem[]
  totalAmount     Int
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  addressId       String      @db.ObjectId

  @@map("orders")
}

model OrderItem {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  color     String
  size      String

  @@map("order_items")
}

model Product {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  description    String
  category       String
  imageUrl       String[]
  name           String          @unique
  price          Int
  discount       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  CartItem       CartItem[]
  wishlistedBy   UserProduct[]
  productDetails ProductDetail[]
  reviews        Review[]
  OrderItem      OrderItem[]

  @@map("products")
}

model ProductDetail {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  size      String
  color     String
  quantity  Int
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_details")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  accountId String?    @unique @db.ObjectId
  account   Account?   @relation(fields: [accountId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  color     String
  size      String

  @@map("cartitems")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  password      String
  phone         String    @unique
  email         String    @unique
  otp           String?
  otpExpires    DateTime?
  emailVerified DateTime?
  account       Account?
  sessions      Session[]
  role          String    @default("user")

  @@map("users")
}

model Account {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique @db.ObjectId // Enforce one-to-one relationship
  DOB       DateTime?
  gender    String?
  addresses Address[]
  cart      Cart?
  wishlist  UserProduct[]
  reviews   Review[]
  orders    Order[]
  image     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("accounts")
}

model UserProduct {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  accountId String  @db.ObjectId
  user      Account @relation(fields: [accountId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  @@map("user_products")
}

model Address {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  email     String
  street    String
  city      String
  state     String
  pin       String
  accountId String  @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
  Order     Order[]

  @@map("addresses")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  acount    Account  @relation(fields: [accountId], references: [id])
  accountId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId

  @@map("reviews")
}
